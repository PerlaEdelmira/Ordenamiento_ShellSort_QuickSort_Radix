class MetodosDeOrdenamiento{

public void ordenamientoShellsort(int A[]) {
		int salto, aux, i;
		int comparaciones=0, recorridos=0, intercambios=0;
		boolean cambios;
		long tInicio, tFin;
		tInicio = System.nanoTime();
		
		for(salto = A.length/2; salto !=0; salto/=2) {
			cambios = true;
			recorridos++;
			while (cambios) { // mientras se intercambia algun elemento
				cambios = false;
				for(i = salto; i<A.length; i++) {	//se da una pasada
					if(A[i - salto] > A[i]) {			//Y si estan desordenados
						intercambios++;
						aux = A[i];   				//se ordenan
						A[i] = A[i - salto];
						A[i - salto] = aux;
						cambios = true;			// y se marca como cambio
					}
					comparaciones++;
				}
			}
		}
		mostrarVector(A);
		tFin = System.nanoTime();
		System.out.println("-------> Tiempo de Procesamiento: " + (tFin - tInicio));
		System.out.println("-------> Recorridos: " + recorridos );
		System.out.println("-------> Intercambios: " + intercambios );
		System.out.println("-------> Comparaciones: " + comparaciones);
	}
	public void ordenamientoQuickSort(int numeros[], int primero, int ultimo) {
		int recorridos=0, intercambios=0, comparaciones=0;
		long tInicio, tFin;
		tInicio = System.nanoTime();
		
		int i, j, pivote, aux;
		i = primero;
		j = ultimo;
		pivote = numeros[primero];
		while (i<j) {
			while (numeros[i] <= pivote && i < j) {
				i++;
			}
			while(numeros[j] > pivote) {
				j--;
			}
			if(i < j) {
				comparaciones++;
				aux = numeros[i];
				numeros[i] = numeros[j];
				numeros[j] = aux;
				//intercambios++;
			}
		}
		recorridos++;
		numeros[primero] = numeros[j];
		numeros[j] = pivote;
		intercambios++;
		if(primero < j-1) {
			ordenamientoQuickSort(numeros, primero, j-1);
		}
		if(j+1 < ultimo) {
			ordenamientoQuickSort(numeros, j+1, ultimo);
		}
		
		mostrarVector(numeros);
		tFin = System.nanoTime();
		System.out.println("-------> Tiempo de Procesamiento: " + (tFin - tInicio));
		System.out.println("-------> Recorridos: " + recorridos );
		System.out.println("-------> Intercambios: " + intercambios );
		System.out.println("-------> Comparaciones: " + comparaciones);
	}
	public void ordenamientoRadixSort(int[]arr) {
		long tInicio, tFin;
		tInicio = System.nanoTime();
		if(arr.length == 0)
			return;
		int[][] np = new int[arr.length][2];
		int[] q = new int [0x100];
		int i, j, k, l, f =0;
		for(k=0; k<4; k++) {
			for(i=0; i<(np.length-1);i++) 
				np[i][1] = i+1;
			np[i][1] = -1;
			for(i=0; i<q.length;i++)
				q[i]=-1;
			for(f=i=0;i<arr.length;i++) {
				j = ((0xFF<<(k<<3))&arr[i])>>(k<<3);
				if(q[j] == -1)
					l = q[j] = f;
				else {
					l = q[j];
					while(np[l][1] != -1)
						l = np[l][1];
					np[l][1] = f;
					l = np[l][1];
				}
				f = np[f][1];
				np[l][0] = arr[i];
				np[l][1] = -1;
			}
			for(l=q[i=j=0]; i<0x100;i++)
				for(l=q[i]; l != -1; l=np[l][1])
					arr[j++] = np[l][0];
			
		}
		mostrarVector(arr);
		tFin = System.nanoTime();
		System.out.println("-------> Tiempo de Procesamiento: " + (tFin - tInicio));
	}
	public void mostrarVector(int numeros[]) {
		System.out.println(Arrays.toString(numeros));
	}
}
public class EjemploMetodosORdenamiento {
	public static void main(String[] args) {
	
	MetodosDeOrdenamiento mo = new MetodosDeOrdenamiento();
		Scanner entrada = new Scanner(System.in);

	}
}
